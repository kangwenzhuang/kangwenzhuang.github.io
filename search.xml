<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>封面找不到图片</title>
      <link href="/2019/11/20/%E5%B0%81%E9%9D%A2/"/>
      <url>/2019/11/20/%E5%B0%81%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h3>]]></content>
      
      
      <categories>
          
          <category> 图片问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 封面 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>和</title>
      <link href="/2019/11/20/mark/"/>
      <url>/2019/11/20/mark/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="你好"><a href="#你好" class="headerlink" title="你好"></a>你好</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>做的差不多了</title>
      <link href="/2019/11/20/Untitled/"/>
      <url>/2019/11/20/Untitled/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>tags: 学习<br>categories: 计算</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>手写spring mvc</title>
      <link href="/2019/11/19/%E6%89%8B%E5%86%99spring-mvc/"/>
      <url>/2019/11/19/%E6%89%8B%E5%86%99spring-mvc/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>@[TOC](手写简单版spring mvc)<br>最近要找工作了回忆一下spring，写了一个简易版的spring mvc。代码都上传到了github，请大家下载点星，感谢！！<br><a href="https://github.com/kangwenzhuang/Springmvc" target="_blank" rel="noopener">https://github.com/kangwenzhuang/Springmvc</a><br><strong><em>个人理解，观点可能片面，欢迎在评论区喷我，这样我才能成长<br>适合新手，高手请绕开</em></strong></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>maven项目<br>pom.xml</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;4.0.1&lt;/version&gt;</span><br><span class="line">     &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>既然是手写mvc那就不引入spring包，这里不手写servlet，而是直接添加依赖<br>需要涉及的知识：<strong>web编程，反射，注解</strong></p><h2 id="搭建框架"><a href="#搭建框架" class="headerlink" title="搭建框架"></a>搭建框架</h2><h3 id="注解文件"><a href="#注解文件" class="headerlink" title="注解文件"></a>注解文件</h3><p>1.MyAutowired.java，作用在类的成员变量上面，实现注入的标识</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kang.annotation;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAutowired &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.MyController.java作用在类上面，作为bean的标识</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kang.annotation;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyController &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.MyService.java作用在类上面，作为bean的标识</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kang.annotation;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyService &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.MyRequestMapping.java作用在控制层的类和方法上，作为映射的地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kang.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyRequestMapping &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.MyRequestParam.java作用在控制层方法上的参数，作为请求的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kang.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.PARAMETER)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyRequestParam &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="service和controller层"><a href="#service和controller层" class="headerlink" title="service和controller层"></a>service和controller层</h3><p>1.创建service接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kang.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">result</span><span class="params">(String name,String age)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.实现service接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kang.service.serviceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kang.annotation.MyService;</span><br><span class="line"><span class="keyword">import</span> com.kang.service.UserService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@MyService</span>(<span class="string">"userService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">result</span><span class="params">(String name, String age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"name:"</span> + name + <span class="string">'\n'</span> + <span class="string">"age:"</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.控制层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kang.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kang.annotation.MyAutowired;</span><br><span class="line"><span class="keyword">import</span> com.kang.annotation.MyController;</span><br><span class="line"><span class="keyword">import</span> com.kang.annotation.MyRequestMapping;</span><br><span class="line"><span class="keyword">import</span> com.kang.annotation.MyRequestParam;</span><br><span class="line"><span class="keyword">import</span> com.kang.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyRequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="meta">@MyController</span>(<span class="string">"userController"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@MyAutowired</span>(<span class="string">"userService"</span>)</span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyRequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">result</span><span class="params">(HttpServletRequest request, HttpServletResponse response, @MyRequestParam(<span class="string">"name"</span>)</span> String name, @<span class="title">MyRequestParam</span><span class="params">(<span class="string">"age"</span>)</span> String age) </span>&#123;</span><br><span class="line">        String result= userService.result(name, age);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            PrintWriter pw=response.getWriter();</span><br><span class="line">            pw.write(result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以了，当然不行啊，这只是搭建了一个框架，空壳子一个，不能用的</p><h2 id="浇灌"><a href="#浇灌" class="headerlink" title="浇灌"></a>浇灌</h2><p>springmvc也只是一个web项目，肯定要有web.xml，通过url进行访问获取<br>web.xml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE web-app PUBLIC</span><br><span class="line"> <span class="string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span><br><span class="line"> <span class="string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span> &gt;</span><br><span class="line"></span><br><span class="line">&lt;web-app&gt;</span><br><span class="line">  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;</span><br><span class="line">  &lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">com</span>.<span class="title">kang</span>.<span class="title">DispatcherServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">load</span>-<span class="title">on</span>-<span class="title">startup</span>&gt;0&lt;/<span class="title">load</span>-<span class="title">on</span>-<span class="title">startup</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">DispatcherServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">web</span>-<span class="title">app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建自己的DispatcherServlet类"><a href="#创建自己的DispatcherServlet类" class="headerlink" title="创建自己的DispatcherServlet类"></a>创建自己的DispatcherServlet类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(req, res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse res)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扫包，获取类名，都有哪些类"><a href="#扫包，获取类名，都有哪些类" class="headerlink" title="扫包，获取类名，都有哪些类"></a>扫包，获取类名，都有哪些类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; classNames = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doScan</span><span class="params">(String packageName)</span> </span>&#123;</span><br><span class="line">        String pn=packageName;</span><br><span class="line">        URL url = <span class="keyword">this</span>.getClass().getClassLoader().getResource(packageName.replace(<span class="string">"."</span>, <span class="string">"/"</span>));</span><br><span class="line">        String fileStr = url.getFile();</span><br><span class="line">        File file = <span class="keyword">new</span> File(fileStr);</span><br><span class="line">        String[] filesStr = file.list();</span><br><span class="line">        <span class="keyword">for</span> (String path : filesStr) &#123;</span><br><span class="line">            File filePath = <span class="keyword">new</span> File(fileStr + path);</span><br><span class="line">            <span class="keyword">if</span> (filePath.isDirectory()) &#123;</span><br><span class="line">                doScan((packageName + <span class="string">"."</span> + path));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                classNames.add(packageName + <span class="string">"."</span> + filePath.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们获取包的方式受到springboot中启发，直接扫描DispatcherServlet 根目录<br>String packageName = this.getClass().getPackage().getName();</p><h3 id="扫class，通过上面注解MyController，MyService实例化，实例化bean"><a href="#扫class，通过上面注解MyController，MyService实例化，实例化bean" class="headerlink" title="扫class，通过上面注解MyController，MyService实例化，实例化bean"></a>扫class，通过上面注解MyController，MyService实例化，实例化bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String, Object&gt; beans = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String className : classNames) &#123;</span><br><span class="line">            String cn = className.replace(<span class="string">".class"</span>, <span class="string">""</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class&lt;?&gt; clazz = Class.forName(cn);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (clazz.isAnnotationPresent(MyController<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                    Object instance = clazz.newInstance();</span><br><span class="line">                    MyController mc = clazz.getAnnotation(MyController<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                    String key = mc.value();</span><br><span class="line">                    beans.put(key, instance);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz.isAnnotationPresent(MyService<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                    Object instance = clazz.newInstance();</span><br><span class="line">                    MyService ms = clazz.getAnnotation(MyService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                    String key = ms.value();</span><br><span class="line">                    beans.put(key, instance);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException | InstantiationException | IllegalAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="扫bean实例，获得class，根据MyAutowired往类中射入所需（成员）变量"><a href="#扫bean实例，获得class，根据MyAutowired往类中射入所需（成员）变量" class="headerlink" title="扫bean实例，获得class，根据MyAutowired往类中射入所需（成员）变量"></a>扫bean实例，获得class，根据MyAutowired往类中射入所需（成员）变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doAutowired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; m : beans.entrySet()) &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = m.getValue().getClass();</span><br><span class="line">            <span class="keyword">if</span> (clazz.isAnnotationPresent(MyController<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">                <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (field.isAnnotationPresent(MyAutowired<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                        MyAutowired ma = field.getAnnotation(MyAutowired<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                        String key = ma.value();</span><br><span class="line">                        Object object = beans.get(key);</span><br><span class="line">                        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            field.set(m.getValue(), object);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="将url中的地址映射到方法"><a href="#将url中的地址映射到方法" class="headerlink" title="将url中的地址映射到方法"></a>将url中的地址映射到方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String, Object&gt; handlerMaps = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">urlHanding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; m : beans.entrySet()) &#123;</span><br><span class="line">            Object object = m.getValue();</span><br><span class="line">            Class&lt;?&gt; clazz = object.getClass();</span><br><span class="line">            <span class="keyword">if</span> (clazz.isAnnotationPresent(MyController<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                MyRequestMapping mr = clazz.getAnnotation(MyRequestMapping<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                String path1 = mr.value();<span class="comment">//得到/user路径</span></span><br><span class="line"></span><br><span class="line">                Method[] methods = clazz.getMethods();</span><br><span class="line">                <span class="keyword">for</span> (Method mt : methods) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mt.isAnnotationPresent(MyRequestMapping<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                        MyRequestMapping q = mt.getAnnotation(MyRequestMapping<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                        String path2 = q.value();<span class="comment">//得到/hello</span></span><br><span class="line">                        handlerMaps.put(path1 + path2+<span class="string">"/"</span>, mt);<span class="comment">//把路径和对应的方法保存起来，然后在doGet中实现</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="重写doPost方法，将请求对应相应的方法"><a href="#重写doPost方法，将请求对应相应的方法" class="headerlink" title="重写doPost方法，将请求对应相应的方法"></a>重写doPost方法，将请求对应相应的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse res)</span> </span>&#123;</span><br><span class="line">        String uri = req.getRequestURI();</span><br><span class="line">        Method method = (Method) handlerMaps.get(uri);</span><br><span class="line">        Object object = <span class="keyword">null</span>;</span><br><span class="line">        Here:</span><br><span class="line">        <span class="comment">//获取拥有该方法的对象，该对象拥有注解有@MyRequestMapping,且为url</span></span><br><span class="line">        <span class="comment">//先获得类上的@MyRequestMapping(/user),然后看有没有方法注解@MyRequestMapping(/hello)，只有同时拥有就找到了bean，不知道是不是还有更简便的方法，欢迎指导</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; map : beans.entrySet()) &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = map.getValue().getClass();</span><br><span class="line">            <span class="keyword">if</span> (clazz.isAnnotationPresent(MyController<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (clazz.isAnnotationPresent(MyRequestMapping<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                    if (clazz.getAnnotation(MyRequestMapping.class).value().equals("/" + uri.split("/")[1])) &#123;</span><br><span class="line">                        Method[] methods = clazz.getMethods();</span><br><span class="line">                        <span class="keyword">for</span> (Method med : methods) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (med.isAnnotationPresent(MyRequestMapping<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                                MyRequestMapping ma = med.getAnnotation(MyRequestMapping<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                                <span class="keyword">if</span> (ma.value().equals(<span class="string">"/"</span> + uri.split(<span class="string">"/"</span>)[<span class="number">2</span>])) &#123;</span><br><span class="line">                                    object = map.getValue();</span><br><span class="line">                                    <span class="keyword">break</span> Here;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//首先要获取参数列表getArgs，参数获取再次用到反射</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            method.invoke(object, getArgs(req,res,method));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Object[] getArgs(HttpServletRequest req, HttpServletResponse res,Method method)&#123;</span><br><span class="line">        Class&lt;?&gt;[] paramClazzs=method.getParameterTypes();</span><br><span class="line">        Object[] args=<span class="keyword">new</span> Object[paramClazzs.length];</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(Class&lt;?&gt; paramclazz:paramClazzs)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ServletRequest<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">paramclazz</span>))</span>&#123;</span><br><span class="line">                args[i++]=req;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ServletResponse<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">paramclazz</span>))</span>&#123;</span><br><span class="line">                args[i++]=res;</span><br><span class="line">            &#125;</span><br><span class="line">            Annotation[] paramAns=method.getParameterAnnotations()[index];<span class="comment">//第0和1个的时候长度为0，因为参数前面没有注解，第3和4个参数前面有注解，因为每个参数的注解可以有多个，所以二维数组</span></span><br><span class="line">            <span class="keyword">if</span>(paramAns.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(Annotation paramAn:paramAns)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(MyRequestParam<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">paramAn</span>.<span class="title">getClass</span>()))</span>&#123;</span><br><span class="line">                        MyRequestParam rp=(MyRequestParam) paramAn;</span><br><span class="line">                        args[i++]=req.getParameter(rp.value());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> args;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>Done！！！</strong></p><h2 id="自己写"><a href="#自己写" class="headerlink" title="自己写"></a>自己写</h2><p>如果我想写一个Responsebody注解，返回json格式，那怎么办呢？这就交给你自己了<br>思路：<br>1.获取方法返回值<br>Object object=method.invoke(object, getArgs(req,res,method));<br>2.使用阿里爸爸的fastjson包解析object转json，具体的自己完成<br>json=f(object);<br>3.设置res的返回格式<br>res.setCharacterEncoding(“utf-8”);<br>res.setContentType(“application/json; charset=utf-8”);<br>PrintWriter pw = resp.getWriter();<br>pw.write(json);</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring ioc之constructor注入</title>
      <link href="/2019/11/19/spring-ioc%E4%B9%8Bconstructor%E6%B3%A8%E5%85%A5/"/>
      <url>/2019/11/19/spring-ioc%E4%B9%8Bconstructor%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>@[TOC](手写简单版spring ioc之constructor注入)<br>源码：<a href="https://github.com/kangwenzhuang/springiocconstructor" target="_blank" rel="noopener">https://github.com/kangwenzhuang/springiocconstructor</a><br><strong><em>个人理解，观点可能片面，欢迎在评论区喷我，这样我才能成长</em></strong><br><strong><em>适合新手，高手请绕开</em></strong></p><h2 id="Spring-IOC为什么是必要的"><a href="#Spring-IOC为什么是必要的" class="headerlink" title="Spring IOC为什么是必要的"></a>Spring IOC为什么是必要的</h2><p>这篇博客写的很清楚<br><a href="https://blog.csdn.net/qq_41805859/article/details/102691899" target="_blank" rel="noopener">https://blog.csdn.net/qq_41805859/article/details/102691899</a></p><h2 id="手把手教你spring-ioc，通过constructor实现"><a href="#手把手教你spring-ioc，通过constructor实现" class="headerlink" title="手把手教你spring ioc，通过constructor实现"></a>手把手教你spring ioc，通过constructor实现</h2><p>目录结构<br><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191025204504779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODA1ODU5,size_16,color_FFFFFF,t_70" class="lazyload"><br>既然是手写，那就不需要引入spring jar包，创建maven项目，我们只需要解析xml的jar包就可以，我们选用dom4j</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;dom4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;dom4j&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.6.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="第一步创建UserDao，接口UserService和UserServiceImpl"><a href="#第一步创建UserDao，接口UserService和UserServiceImpl" class="headerlink" title="第一步创建UserDao，接口UserService和UserServiceImpl"></a>第一步创建UserDao，接口UserService和UserServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kang.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"use userDao add user"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kang.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kang.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kang.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.kang.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.addUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二步是不是就要创建ApplicationContext-xml了，定义bean和bean之间的依赖关系"><a href="#第二步是不是就要创建ApplicationContext-xml了，定义bean和bean之间的依赖关系" class="headerlink" title="第二步是不是就要创建ApplicationContext.xml了，定义bean和bean之间的依赖关系"></a>第二步是不是就要创建ApplicationContext.xml了，定义bean和bean之间的依赖关系</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"userService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.kang.service.impl.UserServiceImpl"</span>&gt;</span><br><span class="line">        &lt;constructor-arg name="userDao" ref="userDao"&gt;&lt;/constructor-arg&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;bean id="userDao" class="com.kang.dao.UserDao"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h3 id="第三步就是创建一个类，用来解析ApplicationContext-xml，装载bean并且完成注入"><a href="#第三步就是创建一个类，用来解析ApplicationContext-xml，装载bean并且完成注入" class="headerlink" title="第三步就是创建一个类，用来解析ApplicationContext.xml，装载bean并且完成注入"></a>第三步就是创建一个类，用来解析ApplicationContext.xml，装载bean并且完成注入</h3><p>根据自己的理解，实现了其实一种写法，不规范的地方可以指出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kang.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleBeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义beanFactory保存bean,key-value</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; beanFactory = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleBeanFactory</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.path = path;</span><br><span class="line">        BeansAndI();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">BeansAndI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用dom4j解析xml文件读取bean标签，将对象创建出来用id为键，对象为值保存到容器中</span></span><br><span class="line">        SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//通过反射机制获取资源文件的路径</span></span><br><span class="line">            URL url = SimpleBeanFactory<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>().<span class="title">getResource</span>(<span class="title">this</span>.<span class="title">path</span>)</span>;</span><br><span class="line">            <span class="comment">//读取xml文件</span></span><br><span class="line">            Document document = reader.read(url);</span><br><span class="line">            <span class="comment">//获取根便签</span></span><br><span class="line">            Element rootElement = document.getRootElement();</span><br><span class="line">            <span class="comment">//读取bean标签，得到对应对象集合</span></span><br><span class="line">            List&lt;Element&gt; beans = rootElement.elements(<span class="string">"bean"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取bean标签中的id作为键，class对象值，并保存到容器中</span></span><br><span class="line">            <span class="keyword">for</span> (Element b : beans) &#123;</span><br><span class="line">                <span class="comment">//获取id键</span></span><br><span class="line">                String key = b.attributeValue(<span class="string">"id"</span>);</span><br><span class="line">                <span class="comment">//获取class值</span></span><br><span class="line">                String value = b.attributeValue(<span class="string">"class"</span>);</span><br><span class="line">                <span class="comment">//存入容器中</span></span><br><span class="line">                beanFactory.put(key, Class.forName(value).newInstance());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//根据constructor-arg标签定义的依赖关系完成依赖注入</span></span><br><span class="line">            <span class="keyword">for</span> (Element b : beans) &#123;</span><br><span class="line">                <span class="comment">//获取bean下的constructor-arg标签</span></span><br><span class="line">                List&lt;Element&gt; properties = b.elements(<span class="string">"constructor-arg"</span>);</span><br><span class="line">                <span class="keyword">for</span> (Element p : properties) &#123;</span><br><span class="line">                    <span class="comment">//需要被赋值的属性名称</span></span><br><span class="line">                    String pName = p.attributeValue(<span class="string">"name"</span>);</span><br><span class="line">                    <span class="comment">//该属性需要赋值的对象在容器里的id</span></span><br><span class="line">                    String pRef = p.attributeValue(<span class="string">"ref"</span>);</span><br><span class="line">                    <span class="comment">//从容器中拿到被依赖的对象</span></span><br><span class="line">                    Object refObject = beanFactory.get(pRef);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//根据bean标签拿到正在循环的这个bean标签的id</span></span><br><span class="line">                    String key = b.attributeValue(<span class="string">"id"</span>);</span><br><span class="line">                    <span class="comment">//从容器中取出依赖方对象</span></span><br><span class="line">                    Object object = beanFactory.get(key);</span><br><span class="line">                    <span class="comment">//获取依赖方的字节码信息</span></span><br><span class="line">                    Class c = object.getClass();</span><br><span class="line">                    <span class="comment">//通过反射，构造函数</span></span><br><span class="line">                    Constructor constructor=c.getConstructor(refObject.getClass());</span><br><span class="line">                    <span class="comment">//将修改后的bean重新装配到beanFactory!!!!!!!!!!!!!!</span></span><br><span class="line">                    object=constructor.newInstance(refObject);</span><br><span class="line">                    beanFactory.put(key,object);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beanFactory.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试一下能否运行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SimpleBeanFactory beans = <span class="keyword">new</span> SimpleBeanFactory(<span class="string">"ApplicationContext.xml"</span>);</span><br><span class="line">        UserService userService = (UserService) beans.getBean(<span class="string">"userService"</span>);</span><br><span class="line">        userService.addUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接在SimpleBeanFactory类中创建main函数进行测试<br>输出结果：use userDao add user</p><h3 id="第四步就是替换"><a href="#第四步就是替换" class="headerlink" title="第四步就是替换"></a>第四步就是替换</h3><p>main函数我可以这样写吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ClassPathXmlApplicationContext beans = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"ApplicationContext.xml"</span>);</span><br><span class="line">UserService service = (UserService) beans.getBean(<span class="string">"userService"</span>);</span><br><span class="line">userService.addUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>肯定可以啊，只是你要添加官方的spring jar包，自己动手试试</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring ioc之setter注入</title>
      <link href="/2019/11/19/spring-ioc%E4%B9%8Bsetter%E6%B3%A8%E5%85%A5/"/>
      <url>/2019/11/19/spring-ioc%E4%B9%8Bsetter%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>@[TOC](手写简单版spring ioc之setter注入)<br>源码：<a href="https://github.com/kangwenzhuang/springiocsetter" target="_blank" rel="noopener">https://github.com/kangwenzhuang/springiocsetter</a><br><strong><em>个人理解，观点可能片面，欢迎在评论区喷我，这样我才能成长</em></strong></p><h2 id="Spring-IOC为什么是必要的"><a href="#Spring-IOC为什么是必要的" class="headerlink" title="Spring IOC为什么是必要的"></a>Spring IOC为什么是必要的</h2><p>这篇博客写的很清楚<br><a href="https://blog.csdn.net/qq_41805859/article/details/102691899" target="_blank" rel="noopener">https://blog.csdn.net/qq_41805859/article/details/102691899</a></p><h2 id="手把手教你spring-ioc，通过setter实现"><a href="#手把手教你spring-ioc，通过setter实现" class="headerlink" title="手把手教你spring ioc，通过setter实现"></a>手把手教你spring ioc，通过setter实现</h2><p>目录结构<br><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191025181358542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODA1ODU5,size_16,color_FFFFFF,t_70" class="lazyload"><br>既然是手写，那就不需要引入spring jar包，创建maven项目，我们只需要解析xml的jar包就可以，我们选用dom4j</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;dom4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;dom4j&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.6.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="第一步创建UserDao，接口UserService和UserServiceImpl"><a href="#第一步创建UserDao，接口UserService和UserServiceImpl" class="headerlink" title="第一步创建UserDao，接口UserService和UserServiceImpl"></a>第一步创建UserDao，接口UserService和UserServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kang.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"use userDao add user"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kang.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kang.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kang.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.kang.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.addUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二步是不是就要创建ApplicationContext-xml了，定义bean和bean之间的依赖关系"><a href="#第二步是不是就要创建ApplicationContext-xml了，定义bean和bean之间的依赖关系" class="headerlink" title="第二步是不是就要创建ApplicationContext.xml了，定义bean和bean之间的依赖关系"></a>第二步是不是就要创建ApplicationContext.xml了，定义bean和bean之间的依赖关系</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"userService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.kang.service.impl.UserServiceImpl"</span>&gt;</span><br><span class="line">        &lt;property name="userDao" ref="userDao"&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;bean id="userDao" class="com.kang.dao.UserDao"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h3 id="第三步就是创建一个类，用来解析ApplicationContext-xml，装载bean并且完成注入"><a href="#第三步就是创建一个类，用来解析ApplicationContext-xml，装载bean并且完成注入" class="headerlink" title="第三步就是创建一个类，用来解析ApplicationContext.xml，装载bean并且完成注入"></a>第三步就是创建一个类，用来解析ApplicationContext.xml，装载bean并且完成注入</h3><p>根据自己的理解，实现了其实一种写法，不规范的地方可以指出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kang.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleBeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义beanFactory保存bean,key-value</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; beanFactory = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleBeanFactory</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.path = path;</span><br><span class="line">        BeansAndI();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">BeansAndI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用dom4j解析xml文件读取bean标签，将对象创建出来用id为键，对象为值保存到容器中</span></span><br><span class="line">        SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//通过反射机制获取资源文件的路径</span></span><br><span class="line">            URL url = SimpleBeanFactory<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>().<span class="title">getResource</span>(<span class="title">this</span>.<span class="title">path</span>)</span>;</span><br><span class="line">            <span class="comment">//读取xml文件</span></span><br><span class="line">            Document document = reader.read(url);</span><br><span class="line">            <span class="comment">//获取根便签</span></span><br><span class="line">            Element rootElement = document.getRootElement();</span><br><span class="line">            <span class="comment">//读取bean标签，得到对应对象集合</span></span><br><span class="line">            List&lt;Element&gt; beans = rootElement.elements(<span class="string">"bean"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取bean标签中的id作为键，class对象值，并保存到容器中</span></span><br><span class="line">            <span class="keyword">for</span> (Element b : beans) &#123;</span><br><span class="line">                <span class="comment">//获取id键</span></span><br><span class="line">                String key = b.attributeValue(<span class="string">"id"</span>);</span><br><span class="line">                <span class="comment">//获取class值</span></span><br><span class="line">                String value = b.attributeValue(<span class="string">"class"</span>);</span><br><span class="line">                <span class="comment">//存入容器中</span></span><br><span class="line">                beanFactory.put(key, Class.forName(value).newInstance());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//根据property标签定义的依赖关系完成依赖注入</span></span><br><span class="line">            <span class="keyword">for</span> (Element b : beans) &#123;</span><br><span class="line">                <span class="comment">//获取bean下的property标签</span></span><br><span class="line">                List&lt;Element&gt; properties = b.elements(<span class="string">"property"</span>);</span><br><span class="line">                <span class="keyword">for</span> (Element p : properties) &#123;</span><br><span class="line">                    <span class="comment">//需要被赋值的属性名称</span></span><br><span class="line">                    String pName = p.attributeValue(<span class="string">"name"</span>);</span><br><span class="line">                    <span class="comment">//该属性需要赋值的对象在容器里的id</span></span><br><span class="line">                    String pRef = p.attributeValue(<span class="string">"ref"</span>);</span><br><span class="line">                    <span class="comment">//从容器中拿到被依赖的对象</span></span><br><span class="line">                    Object refObject = beanFactory.get(pRef);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//根据bean标签拿到正在循环的这个bean标签的id</span></span><br><span class="line">                    String key = b.attributeValue(<span class="string">"id"</span>);</span><br><span class="line">                    <span class="comment">//从容器中取出依赖方对象</span></span><br><span class="line">                    Object object = beanFactory.get(key);</span><br><span class="line">                    <span class="comment">//获取依赖方的字节码信息</span></span><br><span class="line">                    Class c = object.getClass();</span><br><span class="line">                    <span class="comment">//获取需要被赋值的属性对象</span></span><br><span class="line">                    Field field = c.getDeclaredField(pName);</span><br><span class="line">                    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                    field.set(object, refObject);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beanFactory.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试一下能否运行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SimpleBeanFactory beans = <span class="keyword">new</span> SimpleBeanFactory(<span class="string">"ApplicationContext.xml"</span>);</span><br><span class="line">        UserService userService = (UserService) beans.getBean(<span class="string">"userService"</span>);</span><br><span class="line">        userService.addUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接在SimpleBeanFactory类中创建main函数进行测试<br>输出结果：use userDao add user</p><h3 id="第四步就是替换"><a href="#第四步就是替换" class="headerlink" title="第四步就是替换"></a>第四步就是替换</h3><p>main函数我可以这样写吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ClassPathXmlApplicationContext beans = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"ApplicationContext.xml"</span>);</span><br><span class="line">UserService service = (UserService) beans.getBean(<span class="string">"userService"</span>);</span><br><span class="line">userService.addUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>肯定可以啊，只是你要添加官方的spring jar包，自己动手试试</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring ioc为什么需要</title>
      <link href="/2019/11/19/spring-ioc%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81/"/>
      <url>/2019/11/19/spring-ioc%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>@[TOC](Spring IOC为什么是必要的)<br><strong><em>个人理解，观点可能片面，欢迎在评论区喷我，这样我才能成长</em></strong></p><h2 id="白话理解为什么需要IOC"><a href="#白话理解为什么需要IOC" class="headerlink" title="白话理解为什么需要IOC"></a>白话理解为什么需要IOC</h2><p>情景假设：<br>1.假如甲生产笔，乙生产笔帽，要想生产一只完整的笔，甲肯定需要笔帽啊。于是甲便派一个人去甲那里取笔帽，但是不知道什么原因乙搬家了，那甲这次是不是就要失败而归了。第一次搬家，第二次搬家…<br>2.于是甲很烦啊，每次去乙住的地方，乙都换位置了。于是协商了一下，你以后把生产的笔帽给我放到A城哪个仓库，以后的用的时候直接去仓库取</p><p>第一种情况发生的原因就是甲过分依赖乙，所以才会产生一些问题<br>第二种情况解决了问题，但是看着是不是有点麻烦，毕竟鱼与熊掌不可兼得。在数据结构中，就经常有牺牲空间换取时间!<br><img alt="情景1" data-src="https://img-blog.csdnimg.cn/20191023230659288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODA1ODU5,size_16,color_FFFFFF,t_70" class="lazyload"><br><img alt="情景2" data-src="https://img-blog.csdnimg.cn/20191023230751580.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODA1ODU5,size_16,color_FFFFFF,t_70" class="lazyload"></p><h2 id="代码理解为什么需要IOC"><a href="#代码理解为什么需要IOC" class="headerlink" title="代码理解为什么需要IOC"></a>代码理解为什么需要IOC</h2><p>当不使用ioc时，使用传统new的方式</p><p>dao层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String ip;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dao</span><span class="params">(String ip)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ip = ip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">selectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Users in ip:"</span> + <span class="keyword">this</span>.ip;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">selectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Dao dao = <span class="keyword">new</span> Dao(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">        <span class="keyword">return</span> dao.selectUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来试想一个问题：<br>1.如果数据库ip地址变了怎么办，那我是不是就要修改  Dao dao = new Dao(“127.0.0.1”)了<br>2.如果service又增加了一个dao2，那我是不是就要添加一个Dao dao2 = new Dao(ip)了<br>等等……</p><p>这样带来的问题是不是就很多了，究其原因，就是对象之间的依赖太强了，所以我们需要解耦合，换句话就是说依赖注入，控制反转。我需要的对象不管你变没变，需要的时候我就去仓库（工厂）拿，这样的话是不是就好多了,是不是就能理解我们为什么需要spring ioc了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>手写tomcat+servlet，原理浅析</title>
      <link href="/2019/11/19/%E7%9C%9F%E6%AD%A3%E5%BA%94%E7%94%A8/"/>
      <url>/2019/11/19/%E7%9C%9F%E6%AD%A3%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>@<a href="手写tomcat+servlet,浅析原理">TOC</a><br>最近回头看了servlet，写了一个简易版的tomcat+servlet。代码都上传到了github，请大家下载点星，感谢！！<br><a href="https://github.com/kangwenzhuang/mytomcat" target="_blank" rel="noopener">https://github.com/kangwenzhuang/mytomcat</a><br><strong><em>个人理解，观点可能片面，欢迎在评论区喷我，这样我才能成长<br>适合新手，高手请绕开</em></strong></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>首先弄懂http,servlet,http</p><p>socket是使用TCP/IP或者UDP协议在服务器与客户端之间进行传输的技术，是网络编程的基础</p><p>servlet是使用http协议在服务器与客户端之间通信的技术。是Socket的一种应用</p><p>http协议：是在tcp/ip协议之上进一步封装的一层协议，关注的事数据传输的格式是否规范，底层的数据传输还是运用了socket和tcp/ip<br>也就是说我们可以借助socket，实现servlet</p><h2 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h2><ol><li>开启服务，开socket服务端口(8888),接听…</li><li>初始化，读取自定义web.xml，获取自定义servlet（定义servletMap保存servletname和对应的servlet对象，需要用到反射实现）和servletMapping（定义mappingMap保存url和对应的servletname），这样就能通过url找到对应的servlet对象了，然后就能执行里面的东东了，是不是这样的！</li><li>客户端访问，可以是浏览器（最好不要用谷歌，竟然连着发送两次get请求），还可以是postman，客户端访问的同时是不是就意味着socket服务端接受了连接</li><li>输入url，回车，本是一个http请求，但因为请求中带有端口号（8888），8888端口就一个，那么socket正好得到此http请求报文（1.请求行 2.请求头 3.请求体）</li><li>接下来解析http请求报文，需要知道请求方法，请求参数，对了还有一个最重要的请求路径，等等。有了这个请求路径是不是就能在servletMapping找到是哪个对象了，调用里面的方法就能得到结果了</li><li>得到的结果在服务器上，怎么在让请求者得到数据，没错，就是让该socket捎回去<br>大致的过程就是这样<h2 id="手写实现"><a href="#手写实现" class="headerlink" title="手写实现"></a>手写实现</h2><h3 id="便于管理我就在资源文件夹新建property-properties文件，可以设置端口"><a href="#便于管理我就在资源文件夹新建property-properties文件，可以设置端口" class="headerlink" title="便于管理我就在资源文件夹新建property.properties文件，可以设置端口"></a>便于管理我就在资源文件夹新建property.properties文件，可以设置端口</h3></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">port=<span class="number">8888</span></span><br></pre></td></tr></table></figure><p>当然还要有web.xml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE web-app PUBLIC</span><br><span class="line">        <span class="string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span><br><span class="line">        <span class="string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span> &gt;</span><br><span class="line"></span><br><span class="line">&lt;web-app&gt;</span><br><span class="line">    &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;hello&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">com</span>.<span class="title">kang</span>.<span class="title">servlet</span>.<span class="title">ext</span>.<span class="title">Myservlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">hello</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/<span class="title">hello</span>&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">web</span>-<span class="title">app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="新建servlet之前可定要先定义Request和Response"><a href="#新建servlet之前可定要先定义Request和Response" class="headerlink" title="新建servlet之前可定要先定义Request和Response"></a>新建servlet之前可定要先定义Request和Response</h3><p>在这里就要把Request和resonse和socket绑定，通过socket告诉Request请求报文，告诉Response响应报文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kang.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kang.utils.GetParm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Request</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Socket client;</span><br><span class="line">    <span class="keyword">private</span> String url; <span class="comment">// 请求资源</span></span><br><span class="line">    <span class="keyword">private</span> String method; <span class="comment">// 请求方式</span></span><br><span class="line">    <span class="keyword">private</span> String protocal; <span class="comment">// 协议</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMap</span><span class="params">(Map&lt;String, String&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; map; <span class="comment">// 参数列表</span></span><br><span class="line">    <span class="comment">//工具类解析参数</span></span><br><span class="line">    <span class="keyword">private</span> GetParm getParm;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Request</span><span class="params">(Socket client)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.client = client;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        getParm = <span class="keyword">new</span> GetParm();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream is = client.getInputStream();</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 先读取第一行</span></span><br><span class="line">            String firstLine = br.readLine();</span><br><span class="line">            System.out.println(<span class="string">"通过socket查看http请求报文:"</span>);</span><br><span class="line">            System.out.println(<span class="string">"**************************************************************"</span>);</span><br><span class="line">            System.out.println(firstLine);</span><br><span class="line">            String[] split = firstLine.split(<span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">            String rl;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((rl = br.readLine()).equals(<span class="string">""</span>)) <span class="keyword">break</span>;</span><br><span class="line">                System.out.println(rl);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"**************************************************************"</span>);</span><br><span class="line">            <span class="comment">// 把提交方式、请求资源、协议取出</span></span><br><span class="line">            method = split[<span class="number">0</span>];</span><br><span class="line">            url = split[<span class="number">1</span>];</span><br><span class="line">            protocal = split[<span class="number">2</span>];</span><br><span class="line">            <span class="comment">// 解析url，分析参数</span></span><br><span class="line">            <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">"get"</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (url.contains(<span class="string">"?"</span>)) &#123;</span><br><span class="line">                    String[] split2 = url.split(<span class="string">"[?]"</span>);</span><br><span class="line">                    url = split2[<span class="number">0</span>];</span><br><span class="line">                    <span class="comment">// 参数行</span></span><br><span class="line">                    String property = split2[<span class="number">1</span>];</span><br><span class="line">                    map = getParm.getParm(property);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                BufferedReader br1 = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line">                <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (br1.ready()) &#123;</span><br><span class="line">                    String line = br1.readLine();</span><br><span class="line">                    <span class="keyword">if</span> (line.contains(<span class="string">"Content-Length"</span>)) &#123;</span><br><span class="line">                        String[] split2 = line.split(<span class="string">" "</span>);</span><br><span class="line">                        length = Integer.parseInt(split2[<span class="number">1</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (line.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                String info = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">char</span>[] ch = <span class="keyword">new</span> <span class="keyword">char</span>[length];</span><br><span class="line">                br.read(ch, <span class="number">0</span>, length);</span><br><span class="line">                info = <span class="keyword">new</span> String(ch, <span class="number">0</span>, length);</span><br><span class="line">                map = getParm.getParm(info);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProtocal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> protocal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProtocal</span><span class="params">(String protocal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.protocal = protocal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMethod</span><span class="params">(String method)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Socket <span class="title">getClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得get post 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> method;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得url</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kang.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kang.utils.GetParm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Request</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Socket client;</span><br><span class="line">    <span class="keyword">private</span> String url; <span class="comment">// 请求资源</span></span><br><span class="line">    <span class="keyword">private</span> String method; <span class="comment">// 请求方式</span></span><br><span class="line">    <span class="keyword">private</span> String protocal; <span class="comment">// 协议</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMap</span><span class="params">(Map&lt;String, String&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; map; <span class="comment">// 参数列表</span></span><br><span class="line">    <span class="comment">//工具类解析参数</span></span><br><span class="line">    <span class="keyword">private</span> GetParm getParm;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Request</span><span class="params">(Socket client)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.client = client;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        getParm = <span class="keyword">new</span> GetParm();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream is = client.getInputStream();</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 先读取第一行</span></span><br><span class="line">            String firstLine = br.readLine();</span><br><span class="line">            System.out.println(<span class="string">"通过socket查看http请求报文:"</span>);</span><br><span class="line">            System.out.println(<span class="string">"**************************************************************"</span>);</span><br><span class="line">            System.out.println(firstLine);</span><br><span class="line">            String[] split = firstLine.split(<span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">            String rl;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((rl = br.readLine()).equals(<span class="string">""</span>)) <span class="keyword">break</span>;</span><br><span class="line">                System.out.println(rl);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"**************************************************************"</span>);</span><br><span class="line">            <span class="comment">// 把提交方式、请求资源、协议取出</span></span><br><span class="line">            method = split[<span class="number">0</span>];</span><br><span class="line">            url = split[<span class="number">1</span>];</span><br><span class="line">            protocal = split[<span class="number">2</span>];</span><br><span class="line">            <span class="comment">// 解析url，分析参数</span></span><br><span class="line">            <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">"get"</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (url.contains(<span class="string">"?"</span>)) &#123;</span><br><span class="line">                    String[] split2 = url.split(<span class="string">"[?]"</span>);</span><br><span class="line">                    url = split2[<span class="number">0</span>];</span><br><span class="line">                    <span class="comment">// 参数行</span></span><br><span class="line">                    String property = split2[<span class="number">1</span>];</span><br><span class="line">                    map = getParm.getParm(property);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                BufferedReader br1 = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line">                <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (br1.ready()) &#123;</span><br><span class="line">                    String line = br1.readLine();</span><br><span class="line">                    <span class="keyword">if</span> (line.contains(<span class="string">"Content-Length"</span>)) &#123;</span><br><span class="line">                        String[] split2 = line.split(<span class="string">" "</span>);</span><br><span class="line">                        length = Integer.parseInt(split2[<span class="number">1</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (line.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                String info = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">char</span>[] ch = <span class="keyword">new</span> <span class="keyword">char</span>[length];</span><br><span class="line">                br.read(ch, <span class="number">0</span>, length);</span><br><span class="line">                info = <span class="keyword">new</span> String(ch, <span class="number">0</span>, length);</span><br><span class="line">                map = getParm.getParm(info);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProtocal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> protocal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProtocal</span><span class="params">(String protocal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.protocal = protocal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMethod</span><span class="params">(String method)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Socket <span class="title">getClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得get post 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> method;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得url</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="新建Myservlet，在这之前写一个servlet吧，毕竟有些方法每次都要用"><a href="#新建Myservlet，在这之前写一个servlet吧，毕竟有些方法每次都要用" class="headerlink" title="新建Myservlet，在这之前写一个servlet吧，毕竟有些方法每次都要用"></a>新建Myservlet，在这之前写一个servlet吧，毕竟有些方法每次都要用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kang.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kang.http.Request;</span><br><span class="line"><span class="keyword">import</span> com.kang.http.Response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(Request request, Response response)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断是调用doget 还是 dopost</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"get"</span>.equalsIgnoreCase(request.getMethod())) &#123;</span><br><span class="line">            <span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(Request request, Response response)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(Request request, Response response)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kang.servlet.ext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kang.http.Request;</span><br><span class="line"><span class="keyword">import</span> com.kang.http.Response;</span><br><span class="line"><span class="keyword">import</span> com.kang.servlet.Servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Myservlet</span> <span class="keyword">extends</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(Request request, Response response)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进入了我的第一个servlet"</span>);</span><br><span class="line">        Map&lt;String, String&gt; map=request.getMap();</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String,String&gt; m:map.entrySet())&#123;</span><br><span class="line">            System.out.println(m.getKey()+<span class="string">":"</span>+m.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        response.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line">        response.setWrite(<span class="string">"我的名字是："</span>+map.get(<span class="string">"name"</span>)+<span class="string">"\n"</span>+<span class="string">"我的年龄是："</span>+map.get(<span class="string">"age"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(Request request, Response response)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="需要用到的工具类"><a href="#需要用到的工具类" class="headerlink" title="需要用到的工具类"></a>需要用到的工具类</h3><p>解析参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kang.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URLDecoder;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟浏览器发送请求给服务器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetParm</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;() ;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">GetParm</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,String&gt; <span class="title">getParm</span><span class="params">(String property)</span></span>&#123;</span><br><span class="line">String[] split3 = property.split(<span class="string">"&amp;"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; split3.length; i++) &#123;</span><br><span class="line">String[] split4 = split3[i].split(<span class="string">"="</span>);</span><br><span class="line">map.put(split4[<span class="number">0</span>], URLDecoder.decode(split4[<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(map);</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析xml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kang.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentException;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UtilsXml</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义解析器和文档对象</span></span><br><span class="line">    <span class="keyword">public</span> SAXReader saxReader;</span><br><span class="line">    <span class="keyword">public</span> Document document;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UtilsXml</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取解析器</span></span><br><span class="line">        saxReader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取文档对象</span></span><br><span class="line">            document = saxReader.read(path);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DocumentException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据节点名称获取内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 节点名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 节点内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getElementText</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定位根节点</span></span><br><span class="line">        Element root = document.getRootElement();</span><br><span class="line"></span><br><span class="line">        List&lt;Element&gt; mapp = root.elements(<span class="string">"servlet-mapping"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Element&gt; servlet = root.elements(<span class="string">"servlet"</span>);</span><br><span class="line"></span><br><span class="line">        String serveltName = <span class="string">""</span>;</span><br><span class="line">        String classpath = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Element e : mapp) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.element(<span class="string">"url-pattern"</span>).getText().equals(name)) &#123;</span><br><span class="line">                serveltName = e.element(<span class="string">"servlet-name"</span>).getText();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Element e : servlet) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.element(<span class="string">"servlet-name"</span>).getText().equals(serveltName)) &#123;</span><br><span class="line">                classpath = e.element(<span class="string">"servlet-class"</span>).getText();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> classpath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取节点下的所有节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Element&gt; <span class="title">getNodes</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        Element root = document.getRootElement();</span><br><span class="line">        <span class="keyword">return</span> root.elements(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UtilsXml xml = new UtilsXml(UtilsXml.class.getResource("/") + "web.xml");</span><br><span class="line">        <span class="comment">//System.out.println(xml.getElementText("/myhtml.html"));</span></span><br><span class="line"></span><br><span class="line">        List&lt;Element&gt; list = xml.getNodes(<span class="string">"servlet"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Element element : list) &#123;</span><br><span class="line">            System.out.println(element.element(<span class="string">"servlet-name"</span>).getText());</span><br><span class="line">            System.out.println(element.element(<span class="string">"servlet-class"</span>).getText());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重头戏"><a href="#重头戏" class="headerlink" title="重头戏"></a>重头戏</h3><p>还原tomcat</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kang.socket.SocketProcess;</span><br><span class="line"><span class="keyword">import</span> com.kang.utils.UtilsXml;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTomcat</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties prop;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> HashMap&lt;String, Object&gt; servletMapping = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> HashMap&lt;String, Object&gt; servlet = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        prop = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File file = new File(MyTomcat.class.getClassLoader().getResource("property.properties").getFile());</span><br><span class="line">            prop.load(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        port = Integer.parseInt(prop.getProperty(<span class="string">"port"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        InputStream io = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        String basePath;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"加载配置文件开始"</span>);</span><br><span class="line">            <span class="comment">//读取web.xml</span></span><br><span class="line">            UtilsXml xml = new UtilsXml(MyTomcat.class.getClassLoader().getResource("web.xml").getFile());</span><br><span class="line">            <span class="comment">//讲所有的类都存储到容器中 并且创造对象</span></span><br><span class="line">            List&lt;Element&gt; list = xml.getNodes(<span class="string">"servlet"</span>);</span><br><span class="line">            <span class="keyword">for</span> (Element element : list) &#123;</span><br><span class="line">                servlet.put(element.element(<span class="string">"servlet-name"</span>).getText(), Class.forName(element.element(<span class="string">"servlet-class"</span>).getText()).newInstance());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//映射关系创建</span></span><br><span class="line">            List&lt;Element&gt; list2 = xml.getNodes(<span class="string">"servlet-mapping"</span>);</span><br><span class="line">            <span class="keyword">for</span> (Element element : list2) &#123;</span><br><span class="line">                servletMapping.put(element.element(<span class="string">"url-pattern"</span>).getText(), element.element(<span class="string">"servlet-name"</span>).getText());</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"加载配置文件结束"</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (io != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    io.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">            System.out.println(<span class="string">"Tomcat 服务已启动，地址：localhost ,端口："</span> + port);</span><br><span class="line">            <span class="keyword">this</span>.init();</span><br><span class="line">            <span class="comment">//持续监听</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                Socket socket = serverSocket.accept();</span><br><span class="line">                <span class="comment">//处理任务</span></span><br><span class="line">                Thread thread = <span class="keyword">new</span> SocketProcess(socket);</span><br><span class="line"></span><br><span class="line">                thread.start();</span><br><span class="line">            &#125; <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyTomcat tomcat = <span class="keyword">new</span> MyTomcat();</span><br><span class="line">        tomcat.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里需要一个线程运行Myservlet里的函数，同时将结果让socket输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kang.socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kang.MyTomcat;</span><br><span class="line"><span class="keyword">import</span> com.kang.http.Request;</span><br><span class="line"><span class="keyword">import</span> com.kang.http.Response;</span><br><span class="line"><span class="keyword">import</span> com.kang.servlet.Servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketProcess</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Socket socket;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SocketProcess</span><span class="params">(Socket socket)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Request request = <span class="keyword">new</span> Request(socket);</span><br><span class="line">            Response response = <span class="keyword">new</span> Response(socket);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//从映射中找</span></span><br><span class="line">            System.out.println(<span class="string">"url:"</span> + request.getUrl());</span><br><span class="line">            String servelName = (String) MyTomcat.servletMapping.get(request.getUrl());</span><br><span class="line">            System.out.println(<span class="string">"servelName:"</span> + servelName);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (servelName != <span class="keyword">null</span> &amp;&amp; !servelName.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line">                HashMap&lt;String, Object&gt; servlet1 = MyTomcat.servlet;</span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; m : servlet1.entrySet()) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"key:"</span> + m.getKey());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//映射有的话找到对应的对象</span></span><br><span class="line">                Servlet servlet = (Servlet) MyTomcat.servlet.get(servelName);</span><br><span class="line">                <span class="keyword">if</span> (servlet != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    servlet.doGet(request, response);</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                    System.out.println(<span class="string">"找不到对应的servlet"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"找不到对应的servletMapping"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            String responseHeader = <span class="string">"HTTP/1.1 200 \r\n"</span></span><br><span class="line">                    + <span class="string">"Content-Type: "</span> + response.getContentType() + <span class="string">"\r\n"</span></span><br><span class="line">                    + <span class="string">"\r\n"</span>;</span><br><span class="line">            String res = responseHeader + response.getWrite();</span><br><span class="line">            System.out.println(<span class="string">"通过socket查看http响应报文:"</span>);</span><br><span class="line">            System.out.println(<span class="string">"**************************************************************"</span>);</span><br><span class="line">            System.out.println(res);</span><br><span class="line">            System.out.println(<span class="string">"**************************************************************"</span>);</span><br><span class="line">            OutputStream outputStream=response.getPs();</span><br><span class="line"><span class="comment">//            OutputStream outputStream = socket.getOutputStream();</span></span><br><span class="line">            outputStream.write(res.getBytes(<span class="string">"UTF-8"</span>));</span><br><span class="line">            outputStream.flush();</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><ol><li><p>通过在Request打印出socket的接收，对http请求报文的结构有了一定的认识<br><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191113185238690.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODA1ODU5,size_16,color_FFFFFF,t_70" class="lazyload"></p></li><li><p>在获得http的请求行，请求头，请求体时，我只是写了一个大概，我的写法是</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((rl = br.readLine()).equals(<span class="string">""</span>)) <span class="keyword">break</span>;</span><br><span class="line">                System.out.println(rl);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>其实这样不是很好，第一我把空行给去掉了，第二似乎也没分析去请求体，不过后来我也知道怎么获得了</p><p>一开始的写法是，这样就可以把整个报文都能分析出来，太天真了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((rl = br.readLine())==<span class="keyword">null</span>) <span class="keyword">break</span>;</span><br><span class="line">                System.out.println(rl);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>这样写的问题是，服务器没有回应，debug也不报错，后来我就想了是br.readLine()发生了阻塞，一直在等待，想到了jdk自带的工具jconsole.exe,查看之后果然是这种原因</p><ol start="3"><li>刚开始用servlet的时候有没有人纳闷，doGet中只是形参，并没有实参传递，怎么就会有效果呢<br>真正的并不是直接运行servlet，而是SocketProcess获取servlet实例，SocketProcess中有Request和Response实参，然后传递参数给doGet（Request，Response），同时修改Request和Response，由于是引用传递，那就能解释了</li><li>不加”\r\n”可以吗？肯定不行，这样的话不符合http超文本传输协议，网络识别不出来这到底是什么东西</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String responseHeader = <span class="string">"HTTP/1.1 200 \r\n"</span></span><br><span class="line">                    + <span class="string">"Content-Type: "</span> + response.getContentType() + <span class="string">"\r\n"</span></span><br><span class="line">                    + <span class="string">"\r\n"</span>;</span><br></pre></td></tr></table></figure><p><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/2019111319204272.png" class="lazyload"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>3次</title>
      <link href="/2019/11/19/3%E6%AC%A1/"/>
      <url>/2019/11/19/3%E6%AC%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>发布开发规划</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第二次推送</title>
      <link href="/2019/11/19/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%8E%A8%E9%80%81/"/>
      <url>/2019/11/19/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%8E%A8%E9%80%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>hshewiufh</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>手写servlet+tomcat</title>
      <link href="/2019/11/19/%E7%9B%B4%E6%8E%A5%E6%8E%A8%E9%80%81/"/>
      <url>/2019/11/19/%E7%9B%B4%E6%8E%A5%E6%8E%A8%E9%80%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="对不对"><a href="#对不对" class="headerlink" title="对不对"></a>对不对</h2>]]></content>
      
      
      <categories>
          
          <category> 手写 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>twice</title>
      <link href="/2019/11/19/twice/"/>
      <url>/2019/11/19/twice/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>I don’t know</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2019/11/19/test/"/>
      <url>/2019/11/19/test/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="今天是第一次"><a href="#今天是第一次" class="headerlink" title="今天是第一次"></a>今天是第一次</h2><h4 id="hello"><a href="#hello" class="headerlink" title="hello"></a>hello</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/11/18/hello-world/"/>
      <url>/2019/11/18/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
